{
  "_args": [
    [
      {
        "raw": "deep-grep@>=0.4.0",
        "scope": null,
        "escapedName": "deep-grep",
        "name": "deep-grep",
        "rawSpec": ">=0.4.0",
        "spec": ">=0.4.0",
        "type": "range"
      },
      "C:\\Users\\Hanene\\.idlerc\\Desktop\\Eco-price\\node_modules\\rm"
    ]
  ],
  "_from": "deep-grep@>=0.4.0",
  "_id": "deep-grep@0.4.2",
  "_inCache": true,
  "_location": "/deep-grep",
  "_npmUser": {
    "name": "avriette",
    "email": "jane@cpan.org"
  },
  "_npmVersion": "2.0.0-alpha-5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deep-grep@>=0.4.0",
    "scope": null,
    "escapedName": "deep-grep",
    "name": "deep-grep",
    "rawSpec": ">=0.4.0",
    "spec": ">=0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/rm"
  ],
  "_resolved": "https://registry.npmjs.org/deep-grep/-/deep-grep-0.4.2.tgz",
  "_shasum": "01cfb10561934b6f65a64ae4f5a52d675754e74f",
  "_shrinkwrap": null,
  "_spec": "deep-grep@>=0.4.0",
  "_where": "C:\\Users\\Hanene\\.idlerc\\Desktop\\Eco-price\\node_modules\\rm",
  "author": {
    "name": "Jane Arc",
    "email": "jane.arc@gsa.gov",
    "url": "http://github.com/janearc"
  },
  "bugs": {
    "url": "https://github.com/janearc/deep-grep/issues"
  },
  "dependencies": {
    "chai": "*",
    "log4js": "*",
    "mocha": "*",
    "q": "*",
    "xact-id-tiny": ">=0.0.6"
  },
  "description": "Scours arbitrarily-nested objects finding the things you want.",
  "devDependencies": {},
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "01cfb10561934b6f65a64ae4f5a52d675754e74f",
    "tarball": "https://registry.npmjs.org/deep-grep/-/deep-grep-0.4.2.tgz"
  },
  "gitHead": "c74804579e41f51c3e2f368dfbed8523918b92ac",
  "homepage": "https://github.com/janearc/deep-grep",
  "keywords": [
    "grep",
    "recursive",
    "recursion",
    "synchronous",
    "nested",
    "map",
    "filter"
  ],
  "license": "CC0-1.0",
  "main": "lib/dg.js",
  "maintainers": [
    {
      "name": "avriette",
      "email": "jane@cpan.org"
    }
  ],
  "name": "deep-grep",
  "optionalDependencies": {},
  "readme": "deep-grep\n=========\n\nToo many haystacks, not enough needles &mdash; or, \"when you have a grep,\neverything looks like a list.\"\n\n```javascript\nvar needles = dg.deeply( [\n\tfoo, [\n\t\tbar, baz, [\n\t\t\tbletch, [\n\t\t\t\tqip\n\t\t\t]\n\t\t]\n\t] ], function (t) { if t == qip return t }\n)\n```\n\nusage\n====\n\nFor grep on simple, flat (non-nested) lists:\n\n* `dg.in()`\n  - `dg.in( list, 'value' )` - returns `true` or `false` depending upon\n     whether `list` contains `value`.\n* `dg.all_in()`\n  - `dg.all_in( list_a, list_b )` - returns a list of all values in `list_a`\n   that exist in `list_b`.\n* `dg.unique()`\n  - `dg.unique( list )` - returns all unique values of `list`. Note: flattens.\n* `dg.flatten( )`\n  - `dg.flatten( nested_list )` - returns a list of all the lists contained in\n    `nested_list`, concatenated into a single scope.\n\nFor doing greppy things on nested lists:\n\n```javascript\nvar haystack = [\n\t'zebra', 'lion', [\n\t\t'tiger', 'unicorn', 'emperor penguin'\n\t],\n\t'leprechaun',\n\t'cockerel'\n];\n\nvar needles  = dg.deeply( list, function (t) {\n\tif (new RegExp( ('(unicorn|leprechaun)s?' ).test(t))) return true\n} );\n```\n\nFor more complex data, options are available to you:\n\n```javascript\nvar needles  = dg.deeply( arks['Noah'], function (t) { ... }, {\n\t// Any of these may be defined\n\t//\n\n\t// If items in the provided object have methods, check these methods for\n\t// return values that evaluate as true in the provided function.\n\t//\n\t'check-object-methods': [ 'get_species', 'list_passengers' ],\n\n\t// Provide optionally as argument to calls from check-object-methods, above\n\t//\n\t'object-method-arguments': [ argument, function, 'etc' ],\n\n\t// Return hash keys that evaluate true also?\n\t//   default: false\n\t//\n\t'check-keys': true,\n\n\t// Return hash values that evaluate true?\n\t//   default: false\n\t//\n\t'check-values': true,\n\n\t// Return key/value tuples rather than just keys or just values?\n\t//   default: false\n\t//\n\t'return-hash-tuples': true,\n} );\n```\n\ndeprecated methods\n====\n\n* `dg.sync()`\n  - `dg.sync( list, expression )` - evaluates `list`, returning a new list of every\n     element that matches `expression.test` (like `RegExp`).\n  - `dg.sync( list, func )` - same as above, only executes `func` for every element\n     of list, returning a new list.\n* `dg.async()`\n  - `dg.async( list, expression )` - same as with `sync()`, above, only\n     returns a promise to the list of matches.\n  - `dg.async( list, func, callback )` - same as `sync()`, above, except the\n     callback is called with a promise to the list of matches.\n\nauthor\n====\n\n[@janearc](https://github.com/janearc), jane@cpan.org\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/janearc/deep-grep.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.4.2"
}
