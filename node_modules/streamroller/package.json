{
  "_args": [
    [
      {
        "raw": "streamroller@^2.2.4",
        "scope": null,
        "escapedName": "streamroller",
        "name": "streamroller",
        "rawSpec": "^2.2.4",
        "spec": ">=2.2.4 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Hanene\\.idlerc\\Desktop\\Eco-price\\node_modules\\log4js"
    ]
  ],
  "_from": "streamroller@^2.2.4",
  "_hasShrinkwrap": false,
  "_id": "streamroller@2.2.4",
  "_location": "/streamroller",
  "_nodeVersion": "12.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/streamroller_2.2.4_1587335015251_0.7223629977224244"
  },
  "_npmUser": {
    "name": "csausdev",
    "email": "gareth.nomiddlename@gmail.com"
  },
  "_npmVersion": "6.12.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "streamroller@^2.2.4",
    "scope": null,
    "escapedName": "streamroller",
    "name": "streamroller",
    "rawSpec": "^2.2.4",
    "spec": ">=2.2.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/log4js"
  ],
  "_resolved": "https://registry.npmjs.org/streamroller/-/streamroller-2.2.4.tgz",
  "_shasum": "c198ced42db94086a6193608187ce80a5f2b0e53",
  "_shrinkwrap": null,
  "_spec": "streamroller@^2.2.4",
  "_where": "C:\\Users\\Hanene\\.idlerc\\Desktop\\Eco-price\\node_modules\\log4js",
  "author": {
    "name": "Gareth Jones",
    "email": "gareth.nomiddlename@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/nomiddlename/streamroller/issues"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {
    "date-format": "^2.1.0",
    "debug": "^4.1.1",
    "fs-extra": "^8.1.0"
  },
  "description": "file streams that roll over when size limits, or dates are reached",
  "devDependencies": {
    "@commitlint/cli": "^8.1.0",
    "@commitlint/config-conventional": "^8.1.0",
    "eslint": "^6.0.1",
    "husky": "^3.0.0",
    "mocha": "^6.1.4",
    "nyc": "^14.1.1",
    "proxyquire": "^2.1.1",
    "should": "^13.2.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-OG79qm3AujAM9ImoqgWEY1xG4HX+Lw+yY6qZj9R1K2mhF5bEmQ849wvrb+4vt4jLMLzwXttJlQbOdPOQVRv7DQ==",
    "shasum": "c198ced42db94086a6193608187ce80a5f2b0e53",
    "tarball": "https://registry.npmjs.org/streamroller/-/streamroller-2.2.4.tgz",
    "fileCount": 19,
    "unpackedSize": 122133,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJenM9nCRA9TVsSAnZWagAAg5sP/1T2LuE568W20cicNRcg\n/Uh6pR57tZdZp3HVAay90I4+Pjz1RGEa4wpN1zx8r/Y7rqU7w0DqOs6/MM3I\n5eNysLkUJCP3gWox5ujgB3QNecUWo+MVJoMDzoIVQK0Hp3b269aIIZ5qZVYU\nr7YcZkfW8WJmqfi2B93ge2S9TdllOuruGCp0XSx3p81U/2H+INx3mqL7hR07\ny4yqI7glNCSlaeWVCq71tdVXlNanpinRODSjlpsFUoZx8AUljzLLEjusVLMz\niXu5NK2WW3zTFPpcJvvNEes/B9R9jK693xRZpO4Lurl+Zz4pxjqLETzSID4W\nNyt5cOSvFsgWif5DBzHNJaJYbJtSEYRSP7D6rk3bvyQHQYMZMHRpbZtqXeu1\nflwAbLYQS00alKQ/0wHCp9/rtQtunUEVtw0Mom/3L3f2o3WLBG1Kdklx01j1\nNkK/3ZeEtlwD4FaPfy04UVamvACVYx1QFsq9lx0ehg5uS48t/vx2FGo8rasr\nMz08YCvZRwXofe2CtW1qtIBi5EiQ/Bf4tfS0VzKjFmnB5VBhkDhIr/mNHL72\neJBc9fvhN4gfXyeQE7GP7QaVzFebgM4afzev1YGTnsA2plEOO7LeER3hDsI2\nC+R+ril+pqQprrO9jSgk9O5raBDVJ1G6Xaugrpnn7HBRpP4z/DuiGUtwt8RQ\nT3Tv\r\n=0wcl\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.0"
  },
  "eslintConfig": {
    "env": {
      "browser": false,
      "node": true,
      "es6": true,
      "mocha": true
    },
    "parserOptions": {
      "ecmaVersion": 8
    },
    "extends": "eslint:recommended",
    "rules": {
      "no-console": "off"
    }
  },
  "gitHead": "ece35d7d86c87c04ff09e8604accae81cf36a0ce",
  "homepage": "https://github.com/nomiddlename/streamroller#readme",
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -e $HUSKY_GIT_PARAMS"
    }
  },
  "keywords": [
    "stream",
    "rolling"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "csausdev",
      "email": "gareth.jones@sensis.com.au"
    }
  ],
  "name": "streamroller",
  "optionalDependencies": {},
  "readme": "streamroller\n============\n\nnode.js file streams that roll over when they reach a maximum size, or a date/time.\n\n        npm install streamroller\n\n## usage\n\n        var rollers = require('streamroller');\n        var stream = new rollers.RollingFileStream('myfile', 1024, 3);\n        stream.write(\"stuff\");\n        stream.end();\n\nThe streams behave the same as standard node.js streams, except that when certain conditions are met they will rename the current file to a backup and start writing to a new file.\n\n### new RollingFileStream(filename [, maxSize, numBackups, options])\n* `filename` (String)\n* `maxSize` - the size in bytes to trigger a rollover, if not provided this defaults to MAX_SAFE_INTEGER and the stream will not roll.\n* `numBackups` - the number of old files to keep\n* `options` - Object\n  * `encoding` - defaults to 'utf8'\n  * `mode` - defaults to 0644\n  * `flags` - defaults to 'a' (see [fs.open](https://nodejs.org/dist/latest-v8.x/docs/api/fs.html#fs_fs_open_path_flags_mode_callback) for more details)\n  * `compress` - (boolean) defaults to `false` - compress the backup files using gzip (files will have `.gz` extension).\n  * `keepFileExt` - (boolean) defaults to `false` - keep the file original extension. e.g.: `abc.log -> abc.1.log`.\n\nThis returns a `WritableStream`. When the current file being written to (given by `filename`) gets up to or larger than `maxSize`, then the current file will be renamed to `filename.1` and a new file will start being written to. Up to `numBackups` of old files are maintained, so if `numBackups` is 3 then there will be 4 files:\n<pre>\n     filename\n     filename.1\n     filename.2\n     filename.3\n</pre>\nWhen filename size >= maxSize then:\n<pre>\n     filename -> filename.1\n     filename.1 -> filename.2\n     filename.2 -> filename.3\n     filename.3 gets overwritten\n     filename is a new file\n</pre>\n\n### new DateRollingFileStream(filename, pattern, options)\n* `filename` (String)\n* `pattern` (String) - the date pattern to trigger rolling (see below)\n* `options` - Object\n\t* `encoding` - defaults to 'utf8'\n\t* `mode` defaults to 0644\n\t* `flags` defaults to 'a' (see [fs.open](https://nodejs.org/dist/latest-v8.x/docs/api/fs.html#fs_fs_open_path_flags_mode_callback) for more details)\n    * `compress` - (boolean) compress the backup files, defaults to false\n    * `keepFileExt` - (boolean) defaults to `false` - keep the file original extension. e.g.: `abc.log -> abc.2013-08-30.log`.\n\t* `alwaysIncludePattern` - (boolean) extend the initial file with the pattern, defaults to false\n  * `daysToKeep` - (integer) if this is greater than 0, then files older than `daysToKeep` days will be deleted during file rolling.\n\n\nThis returns a `WritableStream`. When the current time, formatted as `pattern`, changes then the current file will be renamed to `filename.formattedDate` where `formattedDate` is the result of processing the date through the pattern, and a new file will begin to be written. Streamroller uses [date-format](http://github.com/nomiddlename/date-format) to format dates, and the `pattern` should use the date-format format. e.g. with a `pattern` of `\".yyyy-MM-dd\"`, and assuming today is August 29, 2013 then writing to the stream today will just write to `filename`. At midnight (or more precisely, at the next file write after midnight), `filename` will be renamed to `filename.2013-08-29` and a new `filename` will be created. If `options.alwaysIncludePattern` is true, then the initial file will be `filename.2013-08-29` and no renaming will occur at midnight, but a new file will be written to with the name `filename.2013-08-30`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nomiddlename/streamroller.git"
  },
  "scripts": {
    "clean": "rm -rf node_modules/",
    "codecheck": "eslint \"lib/*.js\" \"test/*.js\"",
    "html-report": "nyc report --reporter=html",
    "prepublishOnly": "npm test",
    "pretest": "npm run codecheck",
    "test": "nyc --check-coverage --lines 100 --branches 100 --functions 100 mocha"
  },
  "version": "2.2.4"
}
