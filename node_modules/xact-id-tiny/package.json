{
  "_args": [
    [
      {
        "raw": "xact-id-tiny@>=0.0.6",
        "scope": null,
        "escapedName": "xact-id-tiny",
        "name": "xact-id-tiny",
        "rawSpec": ">=0.0.6",
        "spec": ">=0.0.6",
        "type": "range"
      },
      "C:\\Users\\Hanene\\.idlerc\\Desktop\\Eco-price\\node_modules\\deep-grep"
    ]
  ],
  "_from": "xact-id-tiny@>=0.0.6",
  "_id": "xact-id-tiny@0.0.7",
  "_inCache": true,
  "_location": "/xact-id-tiny",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/xact-id-tiny-0.0.7.tgz_1481419604810_0.3196152304299176"
  },
  "_npmUser": {
    "name": "janearc",
    "email": "jane.arc@pobox.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xact-id-tiny@>=0.0.6",
    "scope": null,
    "escapedName": "xact-id-tiny",
    "name": "xact-id-tiny",
    "rawSpec": ">=0.0.6",
    "spec": ">=0.0.6",
    "type": "range"
  },
  "_requiredBy": [
    "/deep-grep",
    "/riak-dc"
  ],
  "_resolved": "https://registry.npmjs.org/xact-id-tiny/-/xact-id-tiny-0.0.7.tgz",
  "_shasum": "4c305e0680d8ca7a472b904a3b407063adb1d12c",
  "_shrinkwrap": null,
  "_spec": "xact-id-tiny@>=0.0.6",
  "_where": "C:\\Users\\Hanene\\.idlerc\\Desktop\\Eco-price\\node_modules\\deep-grep",
  "author": {
    "name": "Jane Arc",
    "email": "jane@cpan.org",
    "url": "http://github.com/janearc"
  },
  "bugs": {
    "url": "https://github.com/janearc/xact-id-tiny/issues"
  },
  "dependencies": {
    "assert": "*",
    "log4js": "*",
    "mocha": "*",
    "moment": ">=2.4.0",
    "singleton": "*"
  },
  "description": "A tiny little transaction ID tracker.",
  "devDependencies": {},
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "4c305e0680d8ca7a472b904a3b407063adb1d12c",
    "tarball": "https://registry.npmjs.org/xact-id-tiny/-/xact-id-tiny-0.0.7.tgz"
  },
  "gitHead": "db3e781b68c635ed0d8cd37c148e0f3451559f2e",
  "homepage": "https://github.com/janearc/xact-id-tiny",
  "keywords": [
    "synchronous",
    "simple",
    "transaction",
    "guid",
    "nonce"
  ],
  "license": "CC0-1.0",
  "main": "lib/xit.js",
  "maintainers": [
    {
      "name": "janearc",
      "email": "jane@cpan.org"
    }
  ],
  "name": "xact-id-tiny",
  "optionalDependencies": {},
  "readme": "xact-id-tiny\n====\n\nKeeping state sucks. Nobody wants to do it.\n\nIf you find yourself in a situation where you are tracking transaction IDs\n(because, say, you have an asynchronous network app and you want to know how\nmany are outstanding at any given time) you may feel like the code required to\ntrack your transactions is too large and pollutes an otherwise small codebase\nthat just does whatever it's supposed to do.\n\nSo let something else do the lifting for tracking transaction IDs and\ngenerating unique values for those transactions. That's what this package is\nfor.\n\nquickly\n===\n\nI know you're busy. Here's the real simple use pattern:\n\n```javascript\nvar xit  = require( 'xact-id-tiny' )\n  , xact = xit.add_xact( );\n\ndatabase.do_a_thing( args, function (e, rvalue) {\n  if (e) { return new Error( 'gasp! database breakage!' ) }\n  else   { xit.end_xact( xact ); return rvalue;           }\n} );\n```\n\nEasy, right? The rest of the API is defined below.\n\napi\n===\n\n```javascript\nvar n = xit.nonce()\n```\n\nReturns a guaranteed-to-be-unique string. Note that this string is not\nactually stored in the register of open transactions. If you would like\n`xact-id-tiny` to use your fancy unique ID generator, just overwrite the\n`nonce()` function with your own.\n\n```javascript\nvar t = new xit.xact()\nvar t = new xit.xact(serial)\n```\n\nReturns a `transaction` object suitable for use with `add_xact()` and\n`end_xact()`. If you wish to use your own serial (because you have a means of\nproviding your own or whatever), pass it in as an optional argument. The\n`transaction` object is very simple:\n\n```javascript\n{\n  'serial'  : nonce,\n  'state'   : scalar, // 'open' or 'closed'\n  'opened'  : scalar, // the return from moment().format()\n  'closed'  : scalar, // the return from moment().format()\n}\n```\n\nYou may pass in any object that contains these four keys and use it to keep\nstate through transactions.\n\n```javascript\nvar xact = xit.add_xact( transaction );\nvar xact = xit.add_xact( );\n```\n\nAttempts to \"open\" a new transaction, Returns the transaction object stored in the\ntransaction register. Any failures will result in an `Error` being returned with\na hopefully-useful string.\n\nWhen called without arguments, it will create the transaction object for you,\nusing the internal `nonce()` function.\n\n```javascript\nvar xact = xit.end_xact( transaction );\nvar xact = xit.end_xact( serial );\n```\n\nAttempts to \"close\" the transaction specified. Returns an `Error` with a\nhopefully-useful string in the event something goes wrong.\n\n```javascript\nvar xact = xit.get_xact( transaction );\nvar xact = xit.get_xact( serial );\n```\n\nAttempts to return to you a transaction object from either the transaction\nobject (as it exists in the register, which may differ than what you have\nin your local code if you are doing things concurrently or in separate\npackages) or the serial that was used to track that object.\n\nextra stuff\n===\n\n* You may set the `comment` field of your transaction objects. When the\n  transaction is closed, if there is a comment ('opening a socket to foomatic\n  dot com' or whichever), this will be sent to `log4js` in the `INFO` facility\n  along with the delta for that transaction.\n* There's no magic to the objects. Theoretically, you can store anything you\n  like in them, and the api only pays attention to the four (five&hellip;) \n  fields listed above.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/janearc/xact-id-tiny.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.0.7"
}
